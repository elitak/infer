#!/usr/bin/env perl

# =========================
sub cleanupStr
{
    my( $txt ) = @_;
    chomp($txt);
    $txt =~ s/\s//g;
    return $txt;
}
# =========================

my $args=join(" ", @ARGV);

my $pads_home = $ENV{"PADS_HOME"};
if (length($pads_home) == 0) {
  print "\n** Please set the PADS_HOME environment variable to the root of the PADS distribution.\n";
  exit -1;
}

my $learn_home = $ENV{"LEARN_HOME"};
if (length($learn_home) == 0) {
  print "\n** Please set the LEARN_HOME environment variable to the root of the PADS inference system.\n";
  exit -1;
}

my $sml;
my $sml_from = "environment variable SML";
chomp($sml = $ENV{'SML'});
if (length($sml) == 0) {
  chomp($sml = `type sml 2>/dev/null`);
  $sml =~ s/sml is[ ]?//;
  $sml = "" if ($sml =~ /not/);
  $sml_from = "your path";
}
$sml =~ s/^\s+//;  # remove leading spaces
if (length($sml) == 0) {
  print "\n** No environment variable SML, and no sml in your path.\n";
  exit -1;
}
my $sml_executable = $sml;
$sml_executable =~ s/\s.*//;
my $sml_resolved;
chomp($sml_resolved = `readlink -f $sml_executable 2>/dev/null`);
if ($sml_resolved eq "") {
  $sml_resolved = $sml_executable;
}
if (! (-x $sml_resolved)) {
  print "\n** sml program '$sml' (from $sml_from)"
    . "\n   does not appear to be an executable.\n";
  exit -1;
}
my $smltest;
chomp($smltest = `$sml \@SMLversion 2>&1`);
if ($smltest !~ /^sml [\d.]+$/i) {
  print "\n** sml program '$sml' (from $sml_from)"
    . "\n   does not appear to be an sml interpreter --"
    . "\n   it is failing the simple test '$sml \@SMLversion'\n";
  # exit -1;
  print "... Trying to us it anyway...\n"
}

my $arch_n_opsys = `$pads_home/scripts/arch-n-opsys` || "";
$arch_n_opsys = &cleanupStr($arch_n_opsys);
#print "Arch_n_opsys is: $arch_n_opsys\n";

my $cmd = "$sml \@SMLload=$learn_home/lib/learn.$arch_n_opsys $learn_home $args";
exec $cmd;

